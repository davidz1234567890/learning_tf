#!/usr/bin/env python3
import turtlesim.msg
import time
import tf
import rospy
import roslib
roslib.load_manifest('learning_tf')


def handle_turtle_pose(msg, turtlename):
    br = tf.TransformBroadcaster()
    br.sendTransform((msg.x, msg.y, 0),
                     tf.transformations.quaternion_from_euler(0, 0, msg.theta), rospy.Time.now(), turtlename, "map")
    # br.sendTransform((1, 1, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, msg.theta), rospy.Time.now(), turtlename, "map")
    # br.sendTransform((5.4, 5.4, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, msg.theta), rospy.Time.now(), turtlename, "map")
    # br.sendTransform((0, 0, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, 0), rospy.Time.now(), turtlename, "map")
    # br.sendTransform((1, 0, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, 0), rospy.Time.now(), turtlename, "map")
    # br.sendTransform((0, 0, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, 0), rospy.Time.now(), turtlename, "map")
    # time.sleep(3)
    # br.sendTransform((0, 0, 0),
    #                  tf.transformations.quaternion_from_euler(0, 0, msg.theta), rospy.Time.now(), turtlename, "map")
    # time.sleep(3)

    # by calling the above function, we get another axis at (1,1,0) that rotates a little bit

    # br.sendTransform((1, 1, 0), tf.transformations.quaternion_from_euler(
    #     0, 0, 0), rospy.Time.now(), turtlename, "map")


if __name__ == '__main__':
    rospy.init_node('turtle_tf_broadcaster')
    turtlename = rospy.get_param('~turtle')
    rospy.Subscriber('/%s/pose' % turtlename,
                     turtlesim.msg.Pose,
                     handle_turtle_pose,
                     turtlename)
    rospy.spin()
